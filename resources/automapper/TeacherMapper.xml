<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.stu.dao.TeacherMapper">
  <resultMap id="BaseResultMap" type="com.stu.entity.Teacher">
    <!--@mbg.generated-->
    <!--@Table teacher-->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="sex" jdbcType="VARCHAR" property="sex" />
    <result column="phone" jdbcType="VARCHAR" property="phone" />
    <result column="email" jdbcType="VARCHAR" property="email" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--@mbg.generated-->
    id, `name`, sex, phone, email
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbg.generated-->
    select 
    <include refid="Base_Column_List" />
    from teacher
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbg.generated-->
    delete from teacher
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.stu.entity.Teacher" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into teacher (`name`, sex, phone, 
      email)
    values (#{name,jdbcType=VARCHAR}, #{sex,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, 
      #{email,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.stu.entity.Teacher" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into teacher
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="name != null">
        `name`,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="phone != null">
        phone,
      </if>
      <if test="email != null">
        email,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.stu.entity.Teacher">
    <!--@mbg.generated-->
    update teacher
    <set>
      <if test="name != null">
        `name` = #{name,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.stu.entity.Teacher">
    <!--@mbg.generated-->
    update teacher
    set `name` = #{name,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="getStudentScoreOfTeacher" resultType="com.stu.entity.StudentScoreOfTeacher">
    SELECT
        course.`name` AS courseName,
        student.`name` AS studentName,
        classes.number,
        classes.`level`,
        major.`name`AS majorName,
        stu_course.score,
        stu_course.student_id AS studentId,
        stu_course.course_id AS courseId,
        stu_course.id
    FROM
        teacher
        INNER JOIN
        teacher_classes
        ON
            teacher.id = teacher_classes.teacherid
        INNER JOIN
        student
        INNER JOIN
        stu_class
        ON
            student.id = stu_class.stuId
        INNER JOIN
        classes
        ON
            stu_class.classId = classes.id AND
            teacher_classes.classesid = classes.id
        INNER JOIN
        major
        ON
            classes.majorId = major.id
        INNER JOIN
        teacher_course
        ON
            teacher.id = teacher_course.teacherId
        INNER JOIN
        stu_course
        ON
            student.id = stu_course.student_id
        INNER JOIN
        course
        ON
            teacher_course.courseId = course.id AND
            stu_course.course_id = course.id
    WHERE
        teacher.id = #{param1,jdbcType=INTEGER}

    ORDER BY
        courseName ASC,
        studentName ASC,
        stu_course.score DESC
    LIMIT #{param2,jdbcType=INTEGER}, #{param3,jdbcType=INTEGER}
    </select>
</mapper>